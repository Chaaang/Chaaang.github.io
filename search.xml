<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[博客搭建和美化]]></title>
    <url>%2F2018%2F09%2F17%2Ftool-20180917%2F</url>
    <content type="text"><![CDATA[以前写博客是一种潮流，现在写博客是一种坚持。专注于记录和分析某一细分领域的研究和深度的思考。 作为一个程序员，持续学习是必备技能。 博客搭建结构 Hexo &amp; Next(Mist) 这是我目前博客的结构，我将在这里整理部分搭建心得（并非新手教程） 使用NexT主题的人比较多，说明这个主题确实很成熟了。优化，配置，扩展很多都集成了，博文重质量，关注点放在太花哨确实没意义，但完全不做修改那很没有意思。 中文官网 https://hexo.io/zh-cn/docs/ 1234567# npm install hexo-cli -gyarn global add hexo-clihexo init blogcd blog# npm installyarnhexo server issueMac 推荐使用 POW Pow 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。 PS：生成后本机刷新页面就可以看到生成效果，比较方便。 https://hexo.io/zh-cn/docs/server.htmlhttp://pow.cx/ Next 主题 5. 升级到 6. 的时候换了仓库(换成 Next 官方库了) 官方文档 https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md 从 v6.0.3版本起，zh-Hans改名为zh-CN：需要显式修改_config.xml里的language配置，否则语言显示会退回到默认的英文 官方推荐使用 数据文件https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/DATA-FILES.md 主页文章加阴影在 themes/next/source/css/_custom/custom.styl 添加以下 CSS 代码 12345678// 主页添加阴影效果.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 文章底部标签文字#改成图标修改模板 themes/next/layout/_macro/post.swig搜索 rel=&quot;tag&quot;&gt;#，将 #换成 1&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 点击出桃心12cd themes/next/source/js/srcwget http://7u2ss1.com1.z0.glb.clouddn.com/love.js 修改文件 themes/next/layout_layout.swig 1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 调皮的博客标题修改文件 themes/next/layout_layout.swig 1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/crash_cheat.js&quot;&gt;&lt;/script&gt; 修改文件 themes/next/source/js/src/crash_cheat.js 1234567891011121314151617&lt;!--崩溃欺骗--&gt;var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = '╭(°A°`)╮ 页面崩溃啦 ~'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = '(ฅ&gt;ω&lt;*ฅ) 噫又好了~' + OriginTitile; titleTime = setTimeout(function () &#123; document.title = OriginTitile; &#125;, 2000); &#125;&#125;);]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[执行 hexo 命令报错，找不到模块DTraceProviderBindings]]></title>
    <url>%2F2017%2F09%2F19%2Ftool-20170919%2F</url>
    <content type="text"><![CDATA[hexo报错，找不到模块DTraceProviderBindings 情况是这样的，过了有一段时间没有更新hexo-cli后每次使用无论是hexo s还是hexo d都会报错 1&quot;Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;&quot; 解决 方案是执行 12npm uninstall hexo-cli -gnpm install hexo-cli -g 或 12yarn global remove hexo-cliyarn global add hexo-cli]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RMBP 使用问题总结]]></title>
    <url>%2F2017%2F09%2F16%2Ftool-20170916%2F</url>
    <content type="text"><![CDATA[跑去苹果维修店维修员拿出一根很破旧的magsafe线通电然后就按了开机键不能开机后，就说要放在他那，（这么简单！）那怎么行。 于是 回家尝试网上搜索一番，重设PRAM和重设SMC了一下问题就好了。😅以后就养成了一个习惯出了问题先重置。 一次惊慌失措的无法启动重设PRAM 关闭 Mac。 在键盘上找到以下按键的位置：Command (⌘)、Option、P 和 R。您需要在步骤 4 中同时按住这些键。 启动电脑。 出现灰屏前按住 Command-Option-P-R 键。 按下这些键，直到电脑重新启动，您会再次听到启动声。电脑自行重启的第三次，您就可以松开了。 重设SMC 关闭电脑。 将 MagSafe 电源适配器连接到电源和 Mac（如果尚未连接的话）。 在内建键盘上，同时按下（左侧）Shift-Control-Option 键和电源按钮。这个步骤不会启动电脑。 接下来，您可以同时松开所有键和电源按钮。 按下电源按钮打开电脑。 第一次进水 一次不小心把肥仔快乐水打倒一点到键盘旁的音响孔。由于没有多少，擦干就把这件事情给放在一边了。后面开机莫名其妙断电，后来直接开不了机。急忙跑到重庆苹果直营店售后。 官方并不会当场检验，一般就是询问基本情况 我当时并没有意识到是可乐的问题，邮件发来天价报价单，并告知人为不保修 工作人员在检查后没有完全清干净可乐 最后私下找熟人拆机清理，成功点亮。。 私人建议： 一定一定，很少很少的饮料都要注意立即断电。 找专业的人拆机。饮料要清洗剂，纯净水的话吹干就行了。 iPhone 通过 USB 连接 Macbook 就响个不停的问题我的线能正常充电，但是连接我的rmbp后响个不停。这次留意了一下就重设PRAM和重设SMC但没啥效果。猜测可能是usb接口松了，尝试轻摁线头一会儿就连接正常了。 这种情况应该注意： 线（一定要用官方线）是不是好的，换台机子测试一下。]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyQt5 与 PyQt4 差别应用]]></title>
    <url>%2F2017%2F06%2F14%2FPython-20170614%2F</url>
    <content type="text"><![CDATA[此文为官网原文的翻译和整理 描述能力有限，不确定的翻译会在旁边注释英文更新时间：2017年05月12日官网链接 不与 PyQt4 兼容虽然实际上升级PyQt4写的项目不是那么糟 不再对Python老版本提供支持（Python 2.6 之前）不再实现PyQt4不推荐的API接口PyQt5 不支持任何在PyQt4版本中标记为不推荐或舍弃的Qt API（如果有就会当Bug处理） 不再提供多版本API接口PyQt4 支持多版本的API（如QString，QVariant等）PyQt5 只支持最新的API版本(除QVariant外) QVariant的改变是去掉了 QPyNullVariant （在QVariant的帮助文档里也有显示） 信号和插槽（Signals and Slots）机制更新12345# 下面所列出来的调用方式不再支持QObject.connect()QObject.emit()SIGNAL()SLOT() 所有含有以SIGNAL()或SLOT()返回结果为参数的方法不再支持，转而提供可调用方法（函数）或已捆绑的信号（a bound signal） 风格对比（代码）1234567891011121314151617181920212223242526# PyQt5combo = QtWidgets.QComboBox(self)combo.activated.connect(self.onActivated)# PyQt4combo = QtWidgets.QComboBox(self)self.connect(combo, QtCore.pyqtSignal('activated(QString)'), self.onActivated)``` ### `QObject.disconnect()` 调用无参数，作用断掉所有信号和插槽的连接### TODO New-style Signals and SlotsQt implements signals with an optional argument as two separate signals, one with the argument and one without it. PyQt4 exposed both of these allowing you to connect to each of them. However, when emitting the signal, you had to use the signal appropriate to the number of arguments being emitted.PyQt5 exposes only the signal where all arguments are specified. However it allows any optional arguments to be omitted when emitting the signal.Unlike PyQt4, PyQt5 supports the definition of properties, signals and slots in classes not sub-classed from QObject (i.e. in mixins).## 新增 `QtQml` `QtQuick` 模块并支持从QML创建Python对象不再支持`QtDeclarative`, `QtScript`, `QtScriptTools`模块以上模块被 `QtQml` 和 `QtQuick` 替换。支持从QML创建Python对象## `QtGui` 模块更新QtGui模块被拆分了为QtGui, QtPrintSupport 和QtWidgets三大模块```pythonfrom PyQt5 import QtGui, QtPrintSupport, QtWidgets QtOpenGL 模块更新PyQt5的QtOpenGL模块只提供QGLContext QGLFormat 和 QGLWidget类 QtWebKit 模块更新PyQt4的QtWebKit在PyQt5中分成了QtWebKit和QtWebKitWidgets模块 扩展性增强不再支持pyqtconfig模块The PyQt5 Extension APIPyQt5 支持第三方包直接基于PyQt5开发(如QScintilla) dbus.mainloop.qt 模块更名12#dbus.mainloop.qtdbus.mainloop.pyqt5 # 相同功能只更名 QDataStream 明显数值的参数以数值处理和返回readUint8(); readInt8(); writeUInt8(); writeInt8() 方法在PyQt5中以数值类型写入和返回（PyQt4中是以数值文本） QFileDialog 文件操作接口更新 PyQt5 PyQt4 备注 getOpenFileName() getOpenFileNameAndFilter() getOpenFileNames() getOpenFileNamesAndFilter() getSaveFileNameAndFilter() getSaveFileName() PyQt5 舍弃了 PyQt4 同名的方法 QMatrix 方法不再支持PyQt5 中已经不再支持 PyQt4种不推荐方法 QMatrixPyQt5 中可以考虑使用 QPropertyAnimation QGraphicsItemAnimation 方法不再支持PyQt5 中已经不再支持 PyQt4种不推荐方法 QGraphicsItemAnimationPyQt5 中可以考虑使用 QTransform QPyTextObject 被舍弃PyQt4 implements the QPyTextObject as a workaround for the inability to define a Python class that is sub-classed from more than one Qt class. PyQt5 does support the ability to define a Python class that is sub-classed from more than one Qt class so long as all but one of the Qt classes are interfaces, i.e. they have been declared in C++ as such using Q_DECLARE_INTERFACE. Therefore QPyTextObject is not implemented in PyQt5. QSet 在PyQt5中完全用 集合 形式实现pyuic5 不再提供 --pyqt3-wrapper参数pyuic5 does not support the –pyqt3-wrapper flag of pyuic4. pyrcc5 不再提供 -py2 或 -py3 参数pyrcc5 cli工具不再支持 -py2 或者 -py3 参数。因为输出的代码兼容所有Python版本（v2.6以后的所有版本） PyQt5 优化 合作性多重继承 （Cooperative Multi-inheritance）的初始化方式123# PyQt5 调用父类的`__init__`方法.def __init(self, **kwargs): super().__init__(**kwargs) PyQt5 自动释放GIL，而不是PyQt4的强制释放PyQt5 退出时自动调用sip.setdestroyonexit()以禁用自动析构Python解释器退出PyQt4应用程序时会默认调用C++析构器处理所有它拥有的线程（这通常是以随机的顺序，因此可能会导致解析器崩溃），通过调用 sip.setdestroyonexit() 函数可以禁用。PyQt5 总会自动调用 sip.setdestroyonexit() 函数.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python时间相关的类型转化]]></title>
    <url>%2F2017%2F06%2F13%2FPython-20170613%2F</url>
    <content type="text"><![CDATA[python时间相关的库和转换关系 string 类型(time)1234567import time# 创建文本时间s = time.ctime() # 以当前系统地区来决定输出的时间文本格式s = "2008-11-10 17:53:59"# 转换为时间对象t = time.strptime(s, "%Y-%m-%d %H:%M:%S") datetime 对象1234567891011import datetime# 创建datetime对象# dt_obj = datetime.datetime.now()dt_obj = datetime.datetime(2008, 11, 10, 17, 53, 59) # 转换为文本型时间print(dt_obj.strftime("%Y-%m-%d %H:%M:%S")) # 转换为时间对象time_tuple = dt_obj.timetuple()# 转化哪位时间戳time_stamp = dt_obj.timestamp() time 对象12345678910import time# 创建time对象time_tuple = (2008, 11, 12, 13, 51, 18, 2, 317, 0)# 转换为文本型时间time.strftime("%Y-%m-%d %H:%M:%S", time_tuple)# 转换为datetime对象datetime.datetime(*time_tuple[0:6])# 转换为时间戳time.mktime(time_tuple) int 类型(时间戳)12345678import time, datetime# 获取当前时间的时间戳timestamp = time.time()# 转换为 datetime对象datetime.datetime.fromtimestamp(timestamp) # 本地时区时间# 转换为 time对象time.localtime(timestamp) 带时区的处理转换为 datetime对象123456import time, datetime# 本地时区时间datetime.datetime.fromtimestamp(timestamp)# 标准时区时间datetime.datetime.utcfromtimestamp(timestamp) 转换为 time对象1234# 本地时区time.localtime(timestamp)# 标准时区time.gmtime(timestamp)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>time</tag>
        <tag>datetime</tag>
        <tag>timestamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的观察者模式，PyQt 信号和插槽 机制的理解和应用]]></title>
    <url>%2F2017%2F05%2F18%2FPython-20170518%2F</url>
    <content type="text"><![CDATA[介绍一下Python语言下的观察者模式和其在PyQt运用 内容介绍 提供信号插槽的python实现方式（更大的灵活性） 修改PyQt版的信号和插槽机制使slot可以接受到关键字参数 信号与插槽的 Python 实现介绍 因为实现机制的是Python代码不是PyQt的c++，效率可能会更低 更贴合Python的风格，more pythonic，限制更少 1. 不能用实例属性替换pyqtSignal的类属性..虽然 pySignal 起源于 pyqtSignal 而且直接实例化 pySignal 类的各种使用方式和 pyqtSignal相同（毕竟设计的时候就接口相同），但是有个容易让人困惑的点是 123456# 代码示例，pySignal 在实例化后的类中替换 pyqtSignalclass Window(QWidget): same_signal = pyqtSignal() def __init__(self, parent=None): super(Window, self).__init__(parent) self.same_signal = Signal() 常理来说 pyqtSignal() 应该被 pySignal 替换掉了，但如早先提到的 pyqtSignal 在所在类实例化后摇身一变成实例化的PyQt5.QtCore.pyqtBoundSignal对象。 这代表我们先赋值的类属性已经变成了实例化类的属性了 这样造成的影响是，如果我们给某类多个实例，它们将有自己的signal而且互不干扰（emit 也不干扰） 我们实现的类没有这样的特性，类属性一直是类属性 这意味着给某类赋值类属性，其实例也会遗传相同的类属性（不独立） 解决方案是，pySignal在最开始就应该是实例属性而不是类属性（这样能保证独立） pySignal1234567891011121314151617class Signal: def __init__(self): self.__subscribers = [] def emit(self, *args, **kwargs): for subs in self.__subscribers: subs(*args, **kwargs) def connect(self, func): self.__subscribers.append(func) def disconnect(self, func): try: self.__subscribers.remove(func) except ValueError: print('Warning: function %s not removed ' 'from signal %s'%(func,self)) PyQt signal&amp;slot介绍1. signal只能作为类属性 Only works with class attributesSignals are not class attributes. PyQt5.QtCore.pyqtSignal() is merely a vessel for a future instance variable containing a PyQt*.QtCore.pyqtBoundSignal instance. When you instantiate your class, pyqtSignal goes to work and injects itself as an instance variable and adds itself to the QMetaObject of the class. QMetaObject? It comes with useful methods such as .className(), superClass(), methodCount() which returns the name of the class, its superclasses and number of methods respectively. In C++ these are probably very useful, however a Python programmer might not be very impressed. It’s something we’ve had access to all along via any instances’ class, bases and dictattributes. 2.不能在已经实例化的类中声明 Cannot be used in an already instantiated class这是最让人头痛的特性 Now here’s the kicker. If you’re doing any sort of base- or abstract class work with Qt widgets, you’ll quickly realise that you can’t inherit signals. Other than that, if try and bypass inheritance and have a builder spit out widgets for you, you’ll also notice how Dependency Injection isn’t going to work with signals. They have to be created as class attributes and they can only be created using pyqtSignal(). Please correct me if I’m wrong. 3.必须在声明signal时指明传输参数的类型 Must be pre-specified with any data-types you wish to emit类似于强类型语言的类型声明，这完全不是Python的风格嘛。In other languages, this is referred to as static typing. Python however doesn’t do any of that. 123456789# 这是演示代码（伪代码），实际上得作为类属性声明# normally have to be run via a class' class attribute.signal = pyqtSignal(int, str)signal.emit(my_number, my_string)signal.emit(my_string, my_number)# 报错 TypeErrorsignal.emit(not_enough_args)# 报错 TypeError 4. 不支持关键字参数 Does not support keyword arguments TypeError: emit() takes no keyword arguments Keyword arguments are quite useful as a means of self-documenting code. signal.emit(5)本应该写做signal.emit(velocity=5)这样不仅增强可读性，还可以加强机制使其可以携带相同关键字参数 it can also be used to enforce signals and slots to carry an identical argument signature. 12345678910111213141516def callback(name, address): print("Name=%s and address=%s" % (name, address))signal = Signal()signal.connect(callback)# Mistake the first argument for a tuple.signal.emit(names=('marcus', 'ottosson'), address='earth')# TypeError: callback() got an unexpected keyword argument 'names'# When actually, its a single string value.signal.emit(name='marcus ottosson', address='earth')# Name=marcus ottosson and address=earth# Of course, non-keyword arguments works too.signal.emit('marcus ottosson', 'earth') 5. Cannot be modified after instantiationPython对象，很自然的支持 代码动态修改（monkey-patch）,但pyqtSignals非常特别的不支持As a Python object, you would expect the ability to monkey-patch, but pyqtSignals are special enough to not let you do any of that. I’ll provide an example of monkey-patching for you below. 理解 Understanding Signals and SlotsQt 提供的 信号和槽 机制基于一个(行为型)设计模式 -&gt;观察者模式 (Observer pattern) (TODO 另开一文详细分析 Python的观察者模式) 跨线程上述实现很直接的介绍了基本原理但缺少了很多应该考虑到的应用场景比如跨线程。 在使用pySignal时你可能已经遇到slot所在的线程很容易崩溃（无论是在 QThread 或者 Python的多线程模块），这“怪罪于”多线程之美，两个线程可能同时尝试或访问同一资源. QObject.sender()简而言之, QObject.sender() 可以让接收端可以获得发送端资源。 1234def callback(self, message): # 在 pySignal 和 pyqtSignal 中都支持slot中查询来源signal source_of_signal = self.sender() # 这在当slot可能收到多个来源的signal且需要区分他们的时候非常有用 API参考资料中警告说这种方式可能会破坏面向对象程序的模块性，建议尽量避免 在这里我不准备提供全方位的测评, 但py版相比qt版 pyqtSignal(), 如果是obj1 -&gt; obj2 -&gt; obj3 这种链式调用的话，在obj3的slot中查询sender的话会返回obj1 123456# 在 obj3.listen 中调用sender()会返回 obj1而不是obj2，虽然obj2是调用obj3的signalobj1.signal.connect(obj2.emit)obj2.signal.connect(obj3.listen)obj1.signal.emit()# 而在 pyqtSignal, 将会返回 obj2. 应用Example – 监视类属性的状态It can sometimes be useful to monitor an attribute of a class. 12345678910111213141516171819202122232425262728293031323334353637class Listener(object): def __init__(self): self.container = Container() self.container.value_changed.connect(self.value_changed_event) def value_changed_event(self, previous, current): print("%r says: Value was changed from %s to %s" % (self.__class__.__name__, previous, current))class Container(object): def __init__(self): self.__value = None # 当`value` 改变了我们就发送信号 self.value_changed = core.Signal() @property def value(self): return self.__value @value.setter def value(self, value): self.value_changed.emit(previous=self.__value, current=value) self.__value = valueif __name__ == '__main__': list = Listener() # 改变value值便会触发 list.container.value = 5 # 'Listening' 中打印: Value was changed from None to 5 list.container.value = 6 # 'Listening' 中打印: Value was changed from 5 to 6 总结 在某些复杂的场景下，即使功能强大的pyqtSignal也会触短板,这个时候就可以扩展或自己实现 但选择不站在巨人肩膀上而自己实现某一特性的话，有些情况我们会在遇到时发现（像先提到的线程间的安全性）。这个时候就不得不挑起自己动手实现新特性的担子。 虽然两种signal机制的实现目的是一样的，但它们不一定需要用谁来替换谁。可能最好的方式是两个在代码中同时使用，各取所长，在各自适合的应用场景使用。例如，QThreads 可以使用 pyqtSignal 而我们自定义的组件的基类和制造器(TODO builders)就可以使用 pySignal 相关资源 来源: 英文 多样化信号 资料: PyQt5 官方文档 书籍: Design PatternsIs an excellent summary and reference of many very useful patterns. 书籍: Head First Design PatternsProvides a more gentle and explanatory view of many of the same patterns. 讨论: SOF Custom pyqtSignal implementation]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
</search>
